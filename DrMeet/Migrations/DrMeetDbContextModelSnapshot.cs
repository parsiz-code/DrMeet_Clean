// <auto-generated />
using System;
using DrMeet.Api.Shared.Persistence.DbContexts.EFCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DrMeet.Api.Migrations
{
    [DbContext(typeof(DrMeetDbContext))]
    partial class DrMeetDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bio")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("BirthDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("DayVisitTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("DoctorGroup")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ExperienceYears")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("FatherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("InPerson")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPhoneConsultation")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTextConsultation")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVideoConsultation")
                        .HasColumnType("bit");

                    b.Property<string>("NationalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumberMedicalSystem")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("OverFifteenYearsExperience")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PriceInPerson")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("PriceIsPhoneConsultation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("PriceIsTextConsultation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("PriceIsVideoConsultation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RemoteDoctorId")
                        .HasColumnType("int");

                    b.Property<float>("Score")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.Property<bool>("ShowInOnlineReserveTime")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowPicture")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("WebSite")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Doctors", (string)null);
                });

            modelBuilder.Entity("DrMeet.Api.Shared.Domian.Doctors.DoctorSocialMediaAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("Platform")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("UsernameOrUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorSocialMediaAccount");
                });

            modelBuilder.Entity("DrMeet.Domain.ApplicationSettings.ApplicationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApiVersion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AppVersion")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("ApplicationSetting", (string)null);
                });

            modelBuilder.Entity("DrMeet.Domain.ApplicationSettings.ApplicationSettingFileUpload", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationSettingId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<long>("MaximumSize")
                        .HasColumnType("bigint");

                    b.Property<string>("MaximumSizeFriendlyName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.PrimitiveCollection<string>("ValidExtensions")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationSettingId");

                    b.ToTable("ApplicationSettingFileUpload", (string)null);
                });

            modelBuilder.Entity("DrMeet.Domain.Blogs.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CenterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("SummaryText")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Tags")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.ToTable("Blogs", (string)null);
                });

            modelBuilder.Entity("DrMeet.Domain.Blogs.BlogComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BlogId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("UserId");

                    b.ToTable("BlogComments", (string)null);
                });

            modelBuilder.Entity("DrMeet.Domain.Centers.Center", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Bio")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("CenterOfType")
                        .HasColumnType("int");

                    b.Property<int>("CenterRemoteId")
                        .HasColumnType("int");

                    b.Property<int>("CenterTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("ClinicId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateOfEstablishment")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaxNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OfficeId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<string>("Region")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TariffExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WebSite")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CenterTypeId");

                    b.HasIndex("CityId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Centers", (string)null);
                });

            modelBuilder.Entity("DrMeet.Domain.Centers.CenterComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CenterId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.HasIndex("UserId");

                    b.ToTable("CenterComments", (string)null);
                });

            modelBuilder.Entity("DrMeet.Domain.Centers.CenterDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CenterId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.ToTable("CenterDepartments", (string)null);
                });

            modelBuilder.Entity("DrMeet.Domain.Centers.CenterDoctorServiceOnlineConsultation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CenterDoctorsSelectedId")
                        .HasColumnType("int");

                    b.Property<int?>("CenterId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<double>("PercentagePayment")
                        .HasColumnType("float");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ServicesAvailableId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CenterDoctorsSelectedId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("ServicesAvailableId");

                    b.HasIndex("CenterId", "DoctorId", "ServicesAvailableId")
                        .IsUnique()
                        .HasFilter("[CenterId] IS NOT NULL AND [DoctorId] IS NOT NULL");

                    b.ToTable("CenterDoctorServiceOnlineConsultations", (string)null);
                });

            modelBuilder.Entity("DrMeet.Domain.Centers.CenterDoctorServicePricing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CenterDoctorsSelectedId")
                        .HasColumnType("int");

                    b.Property<int?>("CenterId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<double>("PercentagePayment")
                        .HasColumnType("float");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProviderServicesId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CenterDoctorsSelectedId");

                    b.HasIndex("CenterId");

                    b.HasIndex("ProviderServicesId");

                    b.HasIndex("DoctorId", "CenterId", "ProviderServicesId")
                        .IsUnique()
                        .HasFilter("[CenterId] IS NOT NULL");

                    b.ToTable("CenterDoctorServicePricing", (string)null);
                });

            modelBuilder.Entity("DrMeet.Domain.Centers.CenterDoctorsDepartmantSelected", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CenterDepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("CenterDoctorsSelectedId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CenterDepartmentId");

                    b.HasIndex("CenterDoctorsSelectedId");

                    b.ToTable("CenterDoctorsDepartmantSelected", (string)null);
                });

            modelBuilder.Entity("DrMeet.Domain.Centers.CenterDoctorsSelected", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CenterId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("CenterId", "DoctorId")
                        .IsUnique()
                        .HasFilter("[CenterId] IS NOT NULL AND [DoctorId] IS NOT NULL");

                    b.ToTable("CenterDoctorsSelected", (string)null);
                });

            modelBuilder.Entity("DrMeet.Domain.Centers.CenterDoctorsServiceSelected", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CenterDoctorsSelectedId")
                        .HasColumnType("int");

                    b.Property<int?>("CenterId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int?>("ProviderServiceId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CenterDoctorsSelectedId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("ProviderServiceId");

                    b.HasIndex("CenterId", "DoctorId", "ProviderServiceId")
                        .IsUnique()
                        .HasFilter("[CenterId] IS NOT NULL AND [DoctorId] IS NOT NULL AND [ProviderServiceId] IS NOT NULL");

                    b.ToTable("CenterDoctorsServiceSelected", (string)null);
                });

            modelBuilder.Entity("DrMeet.Domain.Centers.CenterInsurances", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CenterId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("InsuranceId")
                        .HasColumnType("int");

                    b.Property<int?>("InsuranceId1")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("InsuranceId");

                    b.HasIndex("InsuranceId1");

                    b.HasIndex("CenterId", "InsuranceId")
                        .IsUnique()
                        .HasFilter("[CenterId] IS NOT NULL AND [InsuranceId] IS NOT NULL");

                    b.ToTable("CenterInsurancesSelected", (string)null);
                });

            modelBuilder.Entity("DrMeet.Domain.Centers.CenterLicensesSelected", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CenterId")
                        .HasColumnType("int");

                    b.Property<int?>("LicensesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LicensesId");

                    b.HasIndex("CenterId", "LicensesId")
                        .IsUnique()
                        .HasFilter("[CenterId] IS NOT NULL AND [LicensesId] IS NOT NULL");

                    b.ToTable("CenterLicensesSelected", (string)null);
                });

            modelBuilder.Entity("DrMeet.Domain.Centers.CenterLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CenterId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CenterId")
                        .IsUnique();

                    b.ToTable("CenterLocation");
                });

            modelBuilder.Entity("DrMeet.Domain.Centers.CenterPicture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CenterId")
                        .HasColumnType("int");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PictureType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.ToTable("CenterPictures", (string)null);
                });

            modelBuilder.Entity("DrMeet.Domain.Centers.CenterQuestionAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CenterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.ToTable("CenterQuestionAnswers", (string)null);
                });

            modelBuilder.Entity("DrMeet.Domain.Centers.CenterQuestionAnswerCommentPoints", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CenterQuestionAnswerId")
                        .HasColumnType("int");

                    b.Property<int?>("CenterQuestionAnswerId1")
                        .HasColumnType("int");

                    b.Property<bool>("IsNegativePoints")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("CenterQuestionAnswerId");

                    b.HasIndex("CenterQuestionAnswerId1");

                    b.ToTable("CenterQuestionAnswerCommentPoints", (string)null);
                });

            modelBuilder.Entity("DrMeet.Domain.Centers.CenterServiceSelected", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CenterId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("CenterId", "ServiceId")
                        .IsUnique()
                        .HasFilter("[CenterId] IS NOT NULL AND [ServiceId] IS NOT NULL");

                    b.ToTable("CenterServicesSelected", (string)null);
                });

            modelBuilder.Entity("DrMeet.Domain.Centers.CenterSocialMediaAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CenterId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("Platform")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("UsernameOrUrl")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.ToTable("SocialMediaAccounts", (string)null);
                });

            modelBuilder.Entity("DrMeet.Domain.Centers.CenterType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("CenterTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Deleted = false,
                            Name = "کلینیک تخصصی",
                            Order = 1,
                            Status = true
                        },
                        new
                        {
                            Id = 2,
                            Deleted = false,
                            Name = "بیمارستان عمومی",
                            Order = 2,
                            Status = true
                        },
                        new
                        {
                            Id = 3,
                            Deleted = false,
                            Name = "درمانگاه شبانه‌روزی",
                            Order = 3,
                            Status = true
                        },
                        new
                        {
                            Id = 4,
                            Deleted = false,
                            Name = "مرکز تصویربرداری",
                            Order = 4,
                            Status = true
                        },
                        new
                        {
                            Id = 5,
                            Deleted = false,
                            Name = "آزمایشگاه تشخیص طبی",
                            Order = 5,
                            Status = true
                        });
                });

            modelBuilder.Entity("DrMeet.Domain.Centers.CenterUserSelected", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CenterId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.HasIndex("UserId");

                    b.ToTable("CenterUsersSelected", (string)null);
                });

            modelBuilder.Entity("DrMeet.Domain.Doctors.DoctorComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BehaviorScore")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("EconomicEfficiencyScore")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecoveryScore")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TreatmentQualityScore")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("DoctorId", "UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("DoctorComments", (string)null);
                });

            modelBuilder.Entity("DrMeet.Domain.Doctors.DoctorExpertise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("ExpertiseId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ExpertiseId");

                    b.HasIndex("DoctorId", "ExpertiseId")
                        .IsUnique();

                    b.ToTable("DoctorExpertises", (string)null);
                });

            modelBuilder.Entity("DrMeet.Domain.Doctors.DoctorReserveTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CenterDoctorsServiceId")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("DoctorTimeId")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("ShiftStatus")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CenterDoctorsServiceId");

                    b.HasIndex("DoctorTimeId");

                    b.HasIndex("PatientId", "Date", "CenterDoctorsServiceId")
                        .IsUnique();

                    b.ToTable("DoctorReserveTimes", (string)null);
                });

            modelBuilder.Entity("DrMeet.Domain.Doctors.DoctorShift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityStatus")
                        .HasColumnType("int");

                    b.Property<int?>("CenterDoctorsDepartmantId")
                        .HasColumnType("int");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("MeetTime")
                        .HasColumnType("int");

                    b.Property<int>("ShiftType")
                        .HasColumnType("int");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CenterDoctorsDepartmantId", "DayOfWeek", "StartTime", "EndTime")
                        .IsUnique()
                        .HasFilter("[CenterDoctorsDepartmantId] IS NOT NULL");

                    b.ToTable("DoctorShifts", (string)null);
                });

            modelBuilder.Entity("DrMeet.Domain.Doctors.DoctorShiftService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CenterDoctorsServiceId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("DoctorShiftId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CenterDoctorsServiceId");

                    b.HasIndex("DoctorShiftId", "CenterDoctorsServiceId")
                        .IsUnique();

                    b.ToTable("DoctorShiftServices", (string)null);
                });

            modelBuilder.Entity("DrMeet.Domain.Doctors.DoctorShiftTimeItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DoctorShiftId")
                        .HasColumnType("int");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsShiftAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorShiftId", "StartTime", "EndTime")
                        .IsUnique();

                    b.ToTable("DoctorShiftTimeItems", (string)null);
                });

            modelBuilder.Entity("DrMeet.Domain.Iran.IranCity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProvinceId")
                        .HasMaxLength(36)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("IranCities", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "تهران",
                            ProvinceId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "شیراز",
                            ProvinceId = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "اصفهان",
                            ProvinceId = 3
                        },
                        new
                        {
                            Id = 4,
                            Name = "مشهد",
                            ProvinceId = 4
                        },
                        new
                        {
                            Id = 5,
                            Name = "تبریز",
                            ProvinceId = 5
                        },
                        new
                        {
                            Id = 6,
                            Name = "ورامین",
                            ProvinceId = 1
                        },
                        new
                        {
                            Id = 7,
                            Name = "مرودشت",
                            ProvinceId = 2
                        },
                        new
                        {
                            Id = 8,
                            Name = "کاشان",
                            ProvinceId = 3
                        },
                        new
                        {
                            Id = 9,
                            Name = "نیشابور",
                            ProvinceId = 4
                        },
                        new
                        {
                            Id = 10,
                            Name = "مراغه",
                            ProvinceId = 5
                        });
                });

            modelBuilder.Entity("DrMeet.Domain.Iran.IranProvince", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("IranProvinces", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "تهران"
                        },
                        new
                        {
                            Id = 2,
                            Name = "فارس"
                        },
                        new
                        {
                            Id = 3,
                            Name = "اصفهان"
                        },
                        new
                        {
                            Id = 4,
                            Name = "خراسان رضوی"
                        },
                        new
                        {
                            Id = 5,
                            Name = "آذربایجان شرقی"
                        });
                });

            modelBuilder.Entity("DrMeet.Domain.Others.Expertise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Expertises", (string)null);
                });

            modelBuilder.Entity("DrMeet.Domain.Others.Holidays", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Date")
                        .IsUnique();

                    b.ToTable("Holidays", (string)null);
                });

            modelBuilder.Entity("DrMeet.Domain.Others.Insurance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBaseInsurance")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Insurances", (string)null);
                });

            modelBuilder.Entity("DrMeet.Domain.Others.Licenses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Licenses");
                });

            modelBuilder.Entity("DrMeet.Domain.Others.ProviderServices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("ProviderServices", (string)null);
                });

            modelBuilder.Entity("DrMeet.Domain.Others.Slider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CenterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.ToTable("Sliders", (string)null);
                });

            modelBuilder.Entity("DrMeet.Domain.Patients.CenterPatientSelected", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CenterId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.HasIndex("PatientId");

                    b.ToTable("CenterPatientSelected");
                });

            modelBuilder.Entity("DrMeet.Domain.Patients.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BirthDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("FatherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<int?>("InsuranceId")
                        .HasColumnType("int");

                    b.Property<string>("NationalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientRemoteId")
                        .HasColumnType("int");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int?>("SupplementInsuranceId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("InsuranceId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("SupplementInsuranceId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Patients", (string)null);
                });

            modelBuilder.Entity("DrMeet.Domain.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Password")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Picture")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Salt")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserType")
                        .HasColumnType("int");

                    b.Property<string>("VerifyCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("VerifyExpire")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Doctor", b =>
                {
                    b.HasOne("DrMeet.Domain.Iran.IranCity", "IranCity")
                        .WithMany("Doctors")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DrMeet.Domain.Iran.IranProvince", "IranProvince")
                        .WithMany("Doctors")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DrMeet.Domain.Users.User", "User")
                        .WithOne("Doctor")
                        .HasForeignKey("Doctor", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("IranCity");

                    b.Navigation("IranProvince");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DrMeet.Api.Shared.Domian.Doctors.DoctorSocialMediaAccount", b =>
                {
                    b.HasOne("Doctor", "Doctor")
                        .WithMany("DoctorSocialMediaAccounts")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("DrMeet.Domain.ApplicationSettings.ApplicationSettingFileUpload", b =>
                {
                    b.HasOne("DrMeet.Domain.ApplicationSettings.ApplicationSetting", "ApplicationSetting")
                        .WithMany("FileUploadSetting")
                        .HasForeignKey("ApplicationSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationSetting");
                });

            modelBuilder.Entity("DrMeet.Domain.Blogs.Blog", b =>
                {
                    b.HasOne("DrMeet.Domain.Centers.Center", "Center")
                        .WithMany("Blogs")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Center");
                });

            modelBuilder.Entity("DrMeet.Domain.Blogs.BlogComment", b =>
                {
                    b.HasOne("DrMeet.Domain.Blogs.Blog", "Blog")
                        .WithMany("Comments")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrMeet.Domain.Users.User", "User")
                        .WithMany("BlogComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DrMeet.Domain.Centers.Center", b =>
                {
                    b.HasOne("DrMeet.Domain.Centers.CenterType", "CenterType")
                        .WithMany("Center")
                        .HasForeignKey("CenterTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DrMeet.Domain.Iran.IranCity", "IranCity")
                        .WithMany("Centers")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DrMeet.Domain.Iran.IranProvince", "IranProvince")
                        .WithMany("Centers")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CenterType");

                    b.Navigation("IranCity");

                    b.Navigation("IranProvince");
                });

            modelBuilder.Entity("DrMeet.Domain.Centers.CenterComment", b =>
                {
                    b.HasOne("DrMeet.Domain.Centers.Center", "Center")
                        .WithMany("CenterComment")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrMeet.Domain.Users.User", "User")
                        .WithMany("CenterComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Center");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DrMeet.Domain.Centers.CenterDepartment", b =>
                {
                    b.HasOne("DrMeet.Domain.Centers.Center", "Center")
                        .WithMany("CenterDepartment")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Center");
                });

            modelBuilder.Entity("DrMeet.Domain.Centers.CenterDoctorServiceOnlineConsultation", b =>
                {
                    b.HasOne("DrMeet.Domain.Centers.CenterDoctorsSelected", null)
                        .WithMany("CenterDoctorServiceOnlineConsultation")
                        .HasForeignKey("CenterDoctorsSelectedId");

                    b.HasOne("DrMeet.Domain.Centers.Center", "Center")
                        .WithMany("CenterDoctorServiceOnlineConsultation")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Doctor", "Doctor")
                        .WithMany("CenterDoctorServiceOnlineConsultation")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DrMeet.Domain.Others.ProviderServices", "ProviderServices")
                        .WithMany("CenterDoctorServiceOnlineConsultations")
                        .HasForeignKey("ServicesAvailableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Center");

                    b.Navigation("Doctor");

                    b.Navigation("ProviderServices");
                });

            modelBuilder.Entity("DrMeet.Domain.Centers.CenterDoctorServicePricing", b =>
                {
                    b.HasOne("DrMeet.Domain.Centers.CenterDoctorsSelected", null)
                        .WithMany("CenterDoctorServicePricing")
                        .HasForeignKey("CenterDoctorsSelectedId");

                    b.HasOne("DrMeet.Domain.Centers.Center", "Center")
                        .WithMany("CenterDoctorPricing")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Doctor", "Doctor")
                        .WithMany("CenterDoctorServicePricing")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrMeet.Domain.Others.ProviderServices", "ProviderServices")
                        .WithMany("CenterDoctorPricing")
                        .HasForeignKey("ProviderServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Center");

                    b.Navigation("Doctor");

                    b.Navigation("ProviderServices");
                });

            modelBuilder.Entity("DrMeet.Domain.Centers.CenterDoctorsDepartmantSelected", b =>
                {
                    b.HasOne("DrMeet.Domain.Centers.CenterDepartment", "CenterDepartment")
                        .WithMany("CenterDoctorsDepartmantSelected")
                        .HasForeignKey("CenterDepartmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DrMeet.Domain.Centers.CenterDoctorsSelected", "CenterDoctorsSelected")
                        .WithMany("CenterDoctorsDepartmant")
                        .HasForeignKey("CenterDoctorsSelectedId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CenterDepartment");

                    b.Navigation("CenterDoctorsSelected");
                });

            modelBuilder.Entity("DrMeet.Domain.Centers.CenterDoctorsSelected", b =>
                {
                    b.HasOne("DrMeet.Domain.Centers.Center", "Center")
                        .WithMany("CenterDoctors")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Doctor", "Doctor")
                        .WithMany("CenterDoctors")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Center");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("DrMeet.Domain.Centers.CenterDoctorsServiceSelected", b =>
                {
                    b.HasOne("DrMeet.Domain.Centers.CenterDoctorsSelected", null)
                        .WithMany("CenterDoctorsService")
                        .HasForeignKey("CenterDoctorsSelectedId");

                    b.HasOne("DrMeet.Domain.Centers.Center", "Center")
                        .WithMany("CenterDoctorsServiceSelected")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Doctor", "Doctor")
                        .WithMany("CenterDoctorsServiceSelected")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DrMeet.Domain.Others.ProviderServices", "ProviderService")
                        .WithMany("CenterDoctorsService")
                        .HasForeignKey("ProviderServiceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Center");

                    b.Navigation("Doctor");

                    b.Navigation("ProviderService");
                });

            modelBuilder.Entity("DrMeet.Domain.Centers.CenterInsurances", b =>
                {
                    b.HasOne("DrMeet.Domain.Centers.Center", "Center")
                        .WithMany("CenterInsurances")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DrMeet.Domain.Others.Insurance", "Insurance")
                        .WithMany()
                        .HasForeignKey("InsuranceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DrMeet.Domain.Others.Insurance", null)
                        .WithMany("CenterInsurances")
                        .HasForeignKey("InsuranceId1");

                    b.Navigation("Center");

                    b.Navigation("Insurance");
                });

            modelBuilder.Entity("DrMeet.Domain.Centers.CenterLicensesSelected", b =>
                {
                    b.HasOne("DrMeet.Domain.Centers.Center", "Center")
                        .WithMany("CenterLicensesSelected")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DrMeet.Domain.Others.Licenses", "Licenses")
                        .WithMany("CenterLicensesSelected")
                        .HasForeignKey("LicensesId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Center");

                    b.Navigation("Licenses");
                });

            modelBuilder.Entity("DrMeet.Domain.Centers.CenterLocation", b =>
                {
                    b.HasOne("DrMeet.Domain.Centers.Center", "Center")
                        .WithOne("CenterLocation")
                        .HasForeignKey("DrMeet.Domain.Centers.CenterLocation", "CenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Center");
                });

            modelBuilder.Entity("DrMeet.Domain.Centers.CenterPicture", b =>
                {
                    b.HasOne("DrMeet.Domain.Centers.Center", "Center")
                        .WithMany("CenterPicture")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Center");
                });

            modelBuilder.Entity("DrMeet.Domain.Centers.CenterQuestionAnswer", b =>
                {
                    b.HasOne("DrMeet.Domain.Centers.Center", "Center")
                        .WithMany("CenterQuestionAnswer")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Center");
                });

            modelBuilder.Entity("DrMeet.Domain.Centers.CenterQuestionAnswerCommentPoints", b =>
                {
                    b.HasOne("DrMeet.Domain.Centers.CenterQuestionAnswer", null)
                        .WithMany("NegativePoints")
                        .HasForeignKey("CenterQuestionAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrMeet.Domain.Centers.CenterQuestionAnswer", "CenterQuestionAnswer")
                        .WithMany("PositivePoints")
                        .HasForeignKey("CenterQuestionAnswerId1");

                    b.Navigation("CenterQuestionAnswer");
                });

            modelBuilder.Entity("DrMeet.Domain.Centers.CenterServiceSelected", b =>
                {
                    b.HasOne("DrMeet.Domain.Centers.Center", "Center")
                        .WithMany("CenterServices")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DrMeet.Domain.Others.ProviderServices", "ProviderServices")
                        .WithMany("CenterServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Center");

                    b.Navigation("ProviderServices");
                });

            modelBuilder.Entity("DrMeet.Domain.Centers.CenterSocialMediaAccount", b =>
                {
                    b.HasOne("DrMeet.Domain.Centers.Center", "Center")
                        .WithMany("SocialMediaAccount")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Center");
                });

            modelBuilder.Entity("DrMeet.Domain.Centers.CenterUserSelected", b =>
                {
                    b.HasOne("DrMeet.Domain.Centers.Center", "Center")
                        .WithMany("CenterUser")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrMeet.Domain.Users.User", "User")
                        .WithMany("CenterUser")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Center");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DrMeet.Domain.Doctors.DoctorComment", b =>
                {
                    b.HasOne("Doctor", "Doctor")
                        .WithMany("DoctorComments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrMeet.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Doctor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DrMeet.Domain.Doctors.DoctorExpertise", b =>
                {
                    b.HasOne("Doctor", "Doctor")
                        .WithMany("DoctorExpertises")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrMeet.Domain.Others.Expertise", "Expertise")
                        .WithMany("DoctorExpertises")
                        .HasForeignKey("ExpertiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Expertise");
                });

            modelBuilder.Entity("DrMeet.Domain.Doctors.DoctorReserveTime", b =>
                {
                    b.HasOne("DrMeet.Domain.Centers.CenterDoctorsServiceSelected", "CenterDoctorsServiceSelected")
                        .WithMany("DoctorReserveTimes")
                        .HasForeignKey("CenterDoctorsServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrMeet.Domain.Doctors.DoctorShiftTimeItem", "DoctorShiftTimeItem")
                        .WithMany("DoctorReserveTimes")
                        .HasForeignKey("DoctorTimeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DrMeet.Domain.Patients.Patient", "Patient")
                        .WithMany("DoctorReserveTimes")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CenterDoctorsServiceSelected");

                    b.Navigation("DoctorShiftTimeItem");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DrMeet.Domain.Doctors.DoctorShift", b =>
                {
                    b.HasOne("DrMeet.Domain.Centers.CenterDoctorsDepartmantSelected", "CenterDoctorsDepartmant")
                        .WithMany("DoctorShift")
                        .HasForeignKey("CenterDoctorsDepartmantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CenterDoctorsDepartmant");
                });

            modelBuilder.Entity("DrMeet.Domain.Doctors.DoctorShiftService", b =>
                {
                    b.HasOne("DrMeet.Domain.Centers.CenterDoctorsServiceSelected", "CenterDoctorsServiceSelected")
                        .WithMany("DoctorShiftServices")
                        .HasForeignKey("CenterDoctorsServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrMeet.Domain.Doctors.DoctorShift", "DoctorShift")
                        .WithMany("DoctorShiftServices")
                        .HasForeignKey("DoctorShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CenterDoctorsServiceSelected");

                    b.Navigation("DoctorShift");
                });

            modelBuilder.Entity("DrMeet.Domain.Doctors.DoctorShiftTimeItem", b =>
                {
                    b.HasOne("DrMeet.Domain.Doctors.DoctorShift", "DoctorShift")
                        .WithMany("DoctorShiftTimeItems")
                        .HasForeignKey("DoctorShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DoctorShift");
                });

            modelBuilder.Entity("DrMeet.Domain.Iran.IranCity", b =>
                {
                    b.HasOne("DrMeet.Domain.Iran.IranProvince", "Province")
                        .WithMany("Cities")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("DrMeet.Domain.Others.Slider", b =>
                {
                    b.HasOne("DrMeet.Domain.Centers.Center", "Center")
                        .WithMany("Sliders")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Center");
                });

            modelBuilder.Entity("DrMeet.Domain.Patients.CenterPatientSelected", b =>
                {
                    b.HasOne("DrMeet.Domain.Centers.Center", "Center")
                        .WithMany()
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrMeet.Domain.Patients.Patient", "Patient")
                        .WithMany("CenterPatientSelected")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Center");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DrMeet.Domain.Patients.Patient", b =>
                {
                    b.HasOne("DrMeet.Domain.Iran.IranCity", "IranCity")
                        .WithMany("Patients")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DrMeet.Domain.Others.Insurance", "Insurance")
                        .WithMany("Patients")
                        .HasForeignKey("InsuranceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DrMeet.Domain.Iran.IranProvince", "IranProvince")
                        .WithMany("Patients")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DrMeet.Domain.Others.Insurance", "SupplementInsurance")
                        .WithMany()
                        .HasForeignKey("SupplementInsuranceId");

                    b.HasOne("DrMeet.Domain.Users.User", "User")
                        .WithOne("Patient")
                        .HasForeignKey("DrMeet.Domain.Patients.Patient", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Insurance");

                    b.Navigation("IranCity");

                    b.Navigation("IranProvince");

                    b.Navigation("SupplementInsurance");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Doctor", b =>
                {
                    b.Navigation("CenterDoctorServiceOnlineConsultation");

                    b.Navigation("CenterDoctorServicePricing");

                    b.Navigation("CenterDoctors");

                    b.Navigation("CenterDoctorsServiceSelected");

                    b.Navigation("DoctorComments");

                    b.Navigation("DoctorExpertises");

                    b.Navigation("DoctorSocialMediaAccounts");
                });

            modelBuilder.Entity("DrMeet.Domain.ApplicationSettings.ApplicationSetting", b =>
                {
                    b.Navigation("FileUploadSetting");
                });

            modelBuilder.Entity("DrMeet.Domain.Blogs.Blog", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("DrMeet.Domain.Centers.Center", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("CenterComment");

                    b.Navigation("CenterDepartment");

                    b.Navigation("CenterDoctorPricing");

                    b.Navigation("CenterDoctorServiceOnlineConsultation");

                    b.Navigation("CenterDoctors");

                    b.Navigation("CenterDoctorsServiceSelected");

                    b.Navigation("CenterInsurances");

                    b.Navigation("CenterLicensesSelected");

                    b.Navigation("CenterLocation");

                    b.Navigation("CenterPicture");

                    b.Navigation("CenterQuestionAnswer");

                    b.Navigation("CenterServices");

                    b.Navigation("CenterUser");

                    b.Navigation("Sliders");

                    b.Navigation("SocialMediaAccount");
                });

            modelBuilder.Entity("DrMeet.Domain.Centers.CenterDepartment", b =>
                {
                    b.Navigation("CenterDoctorsDepartmantSelected");
                });

            modelBuilder.Entity("DrMeet.Domain.Centers.CenterDoctorsDepartmantSelected", b =>
                {
                    b.Navigation("DoctorShift");
                });

            modelBuilder.Entity("DrMeet.Domain.Centers.CenterDoctorsSelected", b =>
                {
                    b.Navigation("CenterDoctorServiceOnlineConsultation");

                    b.Navigation("CenterDoctorServicePricing");

                    b.Navigation("CenterDoctorsDepartmant");

                    b.Navigation("CenterDoctorsService");
                });

            modelBuilder.Entity("DrMeet.Domain.Centers.CenterDoctorsServiceSelected", b =>
                {
                    b.Navigation("DoctorReserveTimes");

                    b.Navigation("DoctorShiftServices");
                });

            modelBuilder.Entity("DrMeet.Domain.Centers.CenterQuestionAnswer", b =>
                {
                    b.Navigation("NegativePoints");

                    b.Navigation("PositivePoints");
                });

            modelBuilder.Entity("DrMeet.Domain.Centers.CenterType", b =>
                {
                    b.Navigation("Center");
                });

            modelBuilder.Entity("DrMeet.Domain.Doctors.DoctorShift", b =>
                {
                    b.Navigation("DoctorShiftServices");

                    b.Navigation("DoctorShiftTimeItems");
                });

            modelBuilder.Entity("DrMeet.Domain.Doctors.DoctorShiftTimeItem", b =>
                {
                    b.Navigation("DoctorReserveTimes");
                });

            modelBuilder.Entity("DrMeet.Domain.Iran.IranCity", b =>
                {
                    b.Navigation("Centers");

                    b.Navigation("Doctors");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("DrMeet.Domain.Iran.IranProvince", b =>
                {
                    b.Navigation("Centers");

                    b.Navigation("Cities");

                    b.Navigation("Doctors");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("DrMeet.Domain.Others.Expertise", b =>
                {
                    b.Navigation("DoctorExpertises");
                });

            modelBuilder.Entity("DrMeet.Domain.Others.Insurance", b =>
                {
                    b.Navigation("CenterInsurances");

                    b.Navigation("Patients");
                });

            modelBuilder.Entity("DrMeet.Domain.Others.Licenses", b =>
                {
                    b.Navigation("CenterLicensesSelected");
                });

            modelBuilder.Entity("DrMeet.Domain.Others.ProviderServices", b =>
                {
                    b.Navigation("CenterDoctorPricing");

                    b.Navigation("CenterDoctorServiceOnlineConsultations");

                    b.Navigation("CenterDoctorsService");

                    b.Navigation("CenterServices");
                });

            modelBuilder.Entity("DrMeet.Domain.Patients.Patient", b =>
                {
                    b.Navigation("CenterPatientSelected");

                    b.Navigation("DoctorReserveTimes");
                });

            modelBuilder.Entity("DrMeet.Domain.Users.User", b =>
                {
                    b.Navigation("BlogComments");

                    b.Navigation("CenterComments");

                    b.Navigation("CenterUser");

                    b.Navigation("Doctor")
                        .IsRequired();

                    b.Navigation("Patient")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
